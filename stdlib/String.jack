// Copyright (c) 2012-2018 Dano Pernis
// See LICENSE for details

/** The String type. */
class String {
    field int size;
    field Array chars;
    field int length;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }
        let size = maxLength;
        let length = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if (size > 0) {
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        if ((j<0)|(j>length)|(j=length)) {
            do Sys.error(15);
        }
        return chars[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if ((j<0)|(j>length)|(j=length)) {
            do Sys.error(16);
        }
        let chars[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (length = size) {
            do Sys.error(17);
        }
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int i, res, c;
        var boolean d, negative;
        if (length = 0) {
            return 0;
        }

        let d = true;
        if (chars[0] = 45) {
            let negative = true;
            let i = 1;
        }
        while ((i<length)&d) {
            let c = chars[i] - 48;

            let d = ~((c<0)|(c>9));
            if (d) {
                let res = (res*10) + c;
                let i = i + 1;
            }
        }
        if (negative) {
            let res = -res;
        }
        return res;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
        var int i, b;
        var Array c;
        var boolean negative;

        if (size = 0) {
            do Sys.error(19);
        }
        let c = Array.new(6);
        if (number < 0) {
            let negative = true;
            let number = -number;
        }
        let b = number;
        while (b > 0) {
            let b = number / 10;
            let c[i] = 48 + (number - (b*10));
            let i = i + 1;
            let number = b;
        }
        if (negative) {
            let c[i] = 45;
            let i = i + 1;
        }
        if (size<i) {
            do Sys.error(19);
        }
        if (i=0) {
            let chars[0] = 48;
            let length = 1;
        } else {
            let length = 0;
            while (length<i) {
                let chars[length] = c[i-(length+1)];
                let length = length + 1;
            }
        }
        do c.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
